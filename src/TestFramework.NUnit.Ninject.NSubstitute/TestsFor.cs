using Ninject;
using Ninject.MockingKernel.NSubstitute;
using NUnit.Framework;
using TestFramework.NUnit.Ninject.NSubstitute.Syntax;

namespace TestFramework.NUnit.Ninject.NSubstitute
{
    /// <summary>
    /// A base type for units tests.  Provides an auto mocking container. 
    /// </summary>
    /// <typeparam name="T">The class to test.</typeparam>
    public abstract class TestsFor<T> where T : class
    {
        private NSubstituteMockingKernel kernel;

        /// <summary>
        /// Sets up a fresh auto mocking container before each test is run.
        /// </summary>
        [SetUp]
        public void SetUpKernel()
        {
            var settings = new NinjectSettings
            {
                AllowNullInjection = true
            };

            kernel = new NSubstituteMockingKernel(settings);
        }

        /// <summary>
        /// Gets the service / class to test.
        /// </summary>
        /// <returns></returns>
        protected T GetService()
        {
            return kernel.Get<T>();
        }

        /// <summary>
        /// Sets the specified type to a specific instance in the auto mocking container.
        /// </summary>
        /// <typeparam name="TSubstitute">The type to set.</typeparam>
        /// <returns></returns>
        protected SetSubstituteBuilder<TSubstitute> SetSubstituteFor<TSubstitute>()
        {
            return new SetSubstituteBuilder<TSubstitute>(kernel);
        }

        /// <summary>
        /// Gets the substitute generated by the auto mocking container. 
        /// </summary>
        /// <typeparam name="TSubstitute">The type to get.</typeparam>
        /// <returns></returns>
        protected TSubstitute SubstituteFor<TSubstitute>() where TSubstitute : class
        {
            return kernel.Get<TSubstitute>();
        }

        /// <summary>
        /// Resets the auto mocking container.
        /// </summary>
        protected void ResetAutoMocker()
        {
            kernel.Reset();
        }
    }
}
